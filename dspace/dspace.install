<?php

/**
 * @file
 * Creates the database, content types, and fields for dspace.
 */

require_once("dspace.entities.inc");
require_once("includes/dspace.variables.inc");

function dspace_schema(){
    // TODO: rename to collection
    $schema['dspace_set'] = array(
        'fields' => array(
            'id' => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'default' => ''
            ),
            'label' => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => FALSE,
                'default' => ''
            ),
            'status' => array(
                'type' => 'int',
                'size' => 'tiny',
                'not null' => TRUE,
                'default' => 0
            ),
        ),
        'primary key' => array('id')
    );

    $schema['dspace_process_record'] = array(
        'fields' => array(
            'id' => array(
                'type' => 'varchar',
                'length' => 255,
                'default' => ''
            ),
            'set_id' => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'default' => ''
            ),
            'status' => array(
                'type' => 'int',
                'size' => 'tiny',
                'not null' => TRUE,
                'default' => 0
            ),
            'last_modified' => array(
                'type' => 'datetime',
                'mysql_type' => 'DATETIME',
                'not null' => FALSE,
            ),
            'queued' => array(
                'type' => 'datetime',
                'mysql_type' => 'DATETIME',
                'not null' => FALSE,
            ),
        ),
        'primary key' => array('id')
    );

    $schema['dspace_author'] = array(
        'description' => 'Authors from DSpace',
        'fields' => array(
            'id' => array(
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
//                'default' => NULL
            ),
            'first_name' => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => FALSE,
            ),
            'last_name' => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => FALSE,
            ),
            'full_name' => array(
                'type' => 'text',
                'not null' => FALSE,
            ),
        ),
        'primary key' => array('id'),
    );

    $schema['dspace_publisher'] = array(
      'description' => 'Publishers from DSpace',
      'fields' => array(
        'id' => array(
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
  //                'default' => NULL
        ),
        'name' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
      ),
      'primary key' => array('id'),
    );

    $schema['dspace_item'] = array(
        'description' => 'Item from DSpace',
        'fields' => array(
            'id' => array(
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
//                'default' => NULL
            ),
            'dspace_id' => array(
                'type' => 'varchar',
                'length' => 255,
                'default' => ''
            ),
            'last_modified' => array(
                'type' => 'datetime',
                'mysql_type' => 'DATETIME',
                'not null' => FALSE,
            ),
            'title' => array(
                'type' => 'text',
                'not null' => FALSE,
            ),
            'alt_title' => array(
                'type' => 'text',
                'not null' => FALSE,
            ),
            'genre' => array(
                'type' => 'text',
                'not null' => FALSE,
            ),
            'extent' => array(
                'type' => 'text',
                'not null' => FALSE,
            ),
            'abstract' => array(
                'type' => 'text',
                'mysql_type' => 'longtext',
                'not null' => FALSE,
            ),
            'url' => array(
                'type' => 'text',
                'not null' => FALSE,
            ),
            'date_issued' => array(
                'type' => 'datetime',
                'mysql_type' => 'DATETIME',
                'not null' => FALSE,
            ),
            'date_created' => array(
                'type' => 'text',
//                'mysql_type' => 'DATETIME',
              'not null' => FALSE,
            ),
            'language' => array(
                'type' => 'text',
                'not null' => FALSE,
            ),
            'isbn' => array(
                'type' => 'text',
                'not null' => FALSE,
            ),
            'issn' => array(
                'type' => 'text',
                'not null' => FALSE,
            ),
            'copyright' => array(
                'type' => 'text',
                'not null' => FALSE,
            ),
            'full_text' => array(
                'type' => 'text',
                'mysql_type' => 'longtext',
                'not null' => FALSE,
            )

        ),
        'primary key' => array('id'),
        'unique keys' => array('dspace_id' => array('dspace_id')),
    );

    return $schema;
}
//
function dspace_install(){

    $queue = DrupalQueue::get(DSPACE_SYNC, TRUE);
    $queue->createQueue();

    $queue = DrupalQueue::get(DSPACE_QUEUE, TRUE);
    $queue->createQueue();

    dspace_install_vocabularies();

    dspace_add_taxonomy_fields();

    dspace_add_entity_references(DSPACE_ITEM,
      DSPACE_AUTHOR,
      ITEM_AUTHOR_FIELD,
      "Author",
      "Stores a link to the item author.");
    dspace_add_entity_references(DSPACE_ITEM,
      DSPACE_PUBLISHER,
      ITEM_PUBLISHER_FIELD,
      "Publisher",
      "Stores a link to the item publisher.");

}

function dspace_add_entity_references($bundle, $target_type, $field_name, $label,
                               $description='',
                               $cardinality = FIELD_CARDINALITY_UNLIMITED){

  // Make sure the field doesn't already exist.
  if (!field_info_field($field_name)) {
    // Create the field.
    $field = array(
      'field_name' => $field_name,
      'type' => 'entityreference',

      'settings' => array(
        'target_type' => $target_type,
        'handler' => 'base',
        'handler_settings' => array(
          'target_bundles' => array($bundle)
        ),
      ),
      'cardinality' =>  $cardinality,
      'locked' => FALSE,

    );
    field_create_field($field);

    // Create the instance.
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => $bundle,
      'bundle' => $bundle,
      'label' => $label,
      'description' => $description,
      'required' => FALSE,
      'widget' => array(),
      'settings' => array(
        'target_type' => $target_type,
        'handler_settings' => array(
          'target_bundles' => array($bundle)
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
        ),
      ),
    );

    field_create_instance($instance);

    drupal_set_message(t('!field_name was added successfully.', array(
      '!field_name' => $field_name,
    )));
  }
}



function dspace_add_taxonomy_fields(){
    $t = get_t();
    $terms = array(ITEM_SUBJECT_FIELD => DSPACE_ITEM_SUBJECT,
        ITEM_TOPIC_FIELD => DSPACE_ITEM_TOPIC,
        ITEM_REGION_FIELD => DSPACE_ITEM_REGION,
        ITEM_LANGUAGE_FIELD => DSPACE_ITEM_LANGUAGE,
    );

    foreach($terms as $field_name => $vocabulary){

        // Make sure the field doesn't already exist.
        if (!field_info_field($field_name)) {
            // Create the field.
            $field = array(
                'field_name' => $field_name,
                'type' => 'taxonomy_term_reference',
                'settings' => array(
                    'allowed_values' => array(
                        array(
                            'vocabulary' => $vocabulary,
                            'parent' => 0
                        )
                    )
                ),
                'cardinality' =>  FIELD_CARDINALITY_UNLIMITED,
                'locked' => FALSE,

            );
            field_create_field($field);

            $vocabulary_array = explode('_', $vocabulary);
            $label = $vocabulary_array[1];

            // Create the instance.
            $instance = array(
                'field_name' => $field_name,
                'entity_type' => DSPACE_ITEM,
                'bundle' => DSPACE_ITEM,
                'label' => t($label),
                'description' => '',
                'required' => FALSE,
                'widget' => array(),
            );

            field_create_instance($instance);

            drupal_set_message(t('!field_name was added successfully.', array(
                '!field_name' => $field_name,
            )));
        }
    }

}

/**
 * Install default vocabularies
 *
 * @return
 *  TRUE if the operation was successful otherwise the vocabulary
 * machine_name that failed.
 */
function dspace_install_vocabularies(){
    $vocabularies = array(
        array(
            'name' => 'Subject',
            'machine_name' => DSPACE_ITEM_SUBJECT,
            'description' => '',
            'module' => DSPACE,
        ),
        array(
            'name' => 'Topic',
            'machine_name' => DSPACE_ITEM_TOPIC,
            'description' => '',
            'module' => DSPACE,
        ),
        array(
            'name' => 'Region',
            'machine_name' => DSPACE_ITEM_REGION,
            'description' => '',
            'module' => DSPACE,
        ),
        array(
            'name' => 'Language',
            'machine_name' => DSPACE_ITEM_LANGUAGE,
            'description' => '',
            'module' => DSPACE,
        )
    );

    foreach ($vocabularies as $vocabulary) {
        $existing_vocabulary =
            taxonomy_vocabulary_machine_name_load($vocabulary['machine_name']);
        if (!$existing_vocabulary
            && taxonomy_vocabulary_save((object) $vocabulary) === FALSE){
            return $vocabulary['machine_name'];
        }

    }

    return TRUE;

}

function dspace_uninstall(){

    $queue = DrupalQueue::get(DSPACE_SYNC, TRUE);
    $queue->deleteQueue();

    $queue = DrupalQueue::get(DSPACE_QUEUE, TRUE);
    $queue->deleteQueue();

    dspace_uninstall_vocabularies();
    field_delete_field(ITEM_AUTHOR_FIELD);
    field_delete_field(ITEM_SUBJECT_FIELD);
    field_delete_field(ITEM_TOPIC_FIELD);
    field_delete_field(ITEM_REGION_FIELD);
    field_delete_field(ITEM_LANGUAGE_FIELD);

    field_purge_batch(20);
}

function dspace_uninstall_vocabularies(){
//    variable_del("dspace_metadata_prefix");
    variable_del(DSPACE_RECORD_PROCESS_REQUEST);
    // TODO: delete additional variables.

    $subject = taxonomy_vocabulary_machine_name_load(DSPACE_ITEM_SUBJECT);
    taxonomy_vocabulary_delete($subject->vid);

    $topic = taxonomy_vocabulary_machine_name_load(DSPACE_ITEM_TOPIC);
    taxonomy_vocabulary_delete($topic->vid);

    $region = taxonomy_vocabulary_machine_name_load(DSPACE_ITEM_REGION);
    taxonomy_vocabulary_delete($region->vid);

    $language = taxonomy_vocabulary_machine_name_load(DSPACE_ITEM_LANGUAGE);
    taxonomy_vocabulary_delete($language->vid);
}


